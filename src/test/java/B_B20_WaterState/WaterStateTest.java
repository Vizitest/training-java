/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 0f5fc098-e7c7-49db-9778-262734e43e65
*/
package B_B20_WaterState;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import B_B20_WaterState.WaterState;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WaterStateTest {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1getWaterState.methodName, null, data.S1getWaterState.expectedResult, data.S1getWaterState.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -20D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Ice",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 30D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Water",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 120D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Steam",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -300D,
						/* referencingMethodName = */ "",
							ExpectedExceptionResult.<DefaultScenarioTestData>builder()
								.setExpectedException(java.lang.Exception.class)
						.build()
					)
				),
				/* testCaseName = */ "BelowAbsZero",
				/* testCaseDescription = */ "getWaterState:temperature: Invalid Values"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState;

		public DefaultScenarioTestData(S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState) {
			this.S1getWaterState = S1getWaterState;
		}
	}

	public static class S1getWaterStateParameters<TestData> {
		public final String methodName = "S1getWaterState";
		public final ObjectWrapper<java.lang.Double> temperature;
		public final Result<TestData> expectedResult;
		public S1getWaterStateParameters(java.lang.Double temperature, String referencingMethodName, Result<TestData> expectedResult) {
			this.temperature = new ObjectWrapper<>(temperature, referencingMethodName);
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<java.lang.Object, java.lang.String> call() {
			return i ->
			WaterState.getWaterState(temperature.get());
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
