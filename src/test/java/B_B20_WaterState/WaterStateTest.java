/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 72420d73-d5e4-4c81-a4d1-f0851494f8f2
*/
package B_B20_WaterState;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import B_B20_WaterState.WaterState;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WaterStateTest {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1getWaterState.methodName, null, data.S1getWaterState.expectedResult, data.S1getWaterState.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -10D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -273.15D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -0.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive3",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 0D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive4",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 0.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive5",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 50D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive6",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 99.99D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive7",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 100D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive8",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 100.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive9",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 150D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive10",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -300D,
						/* referencingMethodName = */ "",
							ExpectedExceptionResult.<DefaultScenarioTestData>builder()
								.setExpectedException(java.lang.Exception.class)
						.build()
					)
				),
				/* testCaseName = */ "Negative1",
				/* testCaseDescription = */ "getWaterState:temperature: Invalid Values"
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -273.16D,
						/* referencingMethodName = */ "",
							ExpectedExceptionResult.<DefaultScenarioTestData>builder()
								.setExpectedException(java.lang.Exception.class)
						.build()
					)
				),
				/* testCaseName = */ "Negative2",
				/* testCaseDescription = */ "getWaterState:temperature: Invalid Values"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState;

		public DefaultScenarioTestData(S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState) {
			this.S1getWaterState = S1getWaterState;
		}
	}

	public static class S1getWaterStateParameters<TestData> {
		public final String methodName = "S1getWaterState";
		public final ObjectWrapper<java.lang.Double> temperature;
		public final Result<TestData> expectedResult;
		public S1getWaterStateParameters(java.lang.Double temperature, String referencingMethodName, Result<TestData> expectedResult) {
			this.temperature = new ObjectWrapper<>(temperature, referencingMethodName);
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<java.lang.Object, java.lang.String> call() {
			return i ->
			WaterState.getWaterState(temperature.get());
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
FsP7JfLG2/HJ38/j/5tW95WX4AAA==
END_CODEGEN_DATA
*/
