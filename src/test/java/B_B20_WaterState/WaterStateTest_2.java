/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 72420d73-d5e4-4c81-a4d1-f0851494f8f2
*/
package B_B20_WaterState;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import B_B20_WaterState.WaterState;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WaterStateTest_2 {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1getWaterState.methodName, null, data.S1getWaterState.expectedResult, data.S1getWaterState.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -10D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -273.15D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -0.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive3",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 0D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive4",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 0.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive5",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 50D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive6",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 99.99D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive7",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 100D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive8",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 100.01D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive9",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ 150D,
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive10",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -300D,
						/* referencingMethodName = */ "",
							ExpectedExceptionResult.<DefaultScenarioTestData>builder()
								.setExpectedException(java.lang.Exception.class)
						.build()
					)
				),
				/* testCaseName = */ "Negative1",
				/* testCaseDescription = */ "getWaterState:temperature: Invalid Values"
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
						/* java.lang.Double temperature = */ -273.16D,
						/* referencingMethodName = */ "",
							ExpectedExceptionResult.<DefaultScenarioTestData>builder()
								.setExpectedException(java.lang.Exception.class)
						.build()
					)
				),
				/* testCaseName = */ "Negative2",
				/* testCaseDescription = */ "getWaterState:temperature: Invalid Values"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState;

		public DefaultScenarioTestData(S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState) {
			this.S1getWaterState = S1getWaterState;
		}
	}

	public static class S1getWaterStateParameters<TestData> {
		public final String methodName = "S1getWaterState";
		public final ObjectWrapper<java.lang.Double> temperature;
		public final Result<TestData> expectedResult;
		public S1getWaterStateParameters(java.lang.Double temperature, String referencingMethodName, Result<TestData> expectedResult) {
			this.temperature = new ObjectWrapper<>(temperature, referencingMethodName);
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<java.lang.Object, java.lang.String> call() {
			return i ->
			WaterState.getWaterState(temperature.get());
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
WcxLH9yH6xtP1ydPL7/wE5EpY8W34AAA==
END_CODEGEN_DATA
*/
