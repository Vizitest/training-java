/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 29aa54a1-0d61-4c48-b2ff-6b6e19183085
*/
package B_B40_WaterStateInstance;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import B_B40_WaterStateInstance.WaterStateInstance;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WaterStateInstanceTest {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1getWaterState.methodName, data.WaterStateInstance, data.S1getWaterState.expectedResult, data.S1getWaterState.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(-20D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "Positive1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(20D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "Positive2",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(200D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("gas")
						.build()
					)
				),
				/* testCaseName = */ "Positive3",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(-300D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("invalid temperature")
						.build()
					)
				),
				/* testCaseName = */ "Negative1",
				/* testCaseDescription = */ "WaterStateInstance: Invalid Values"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final WaterStateInstance WaterStateInstance;
		public final S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState;

		public DefaultScenarioTestData(WaterStateInstance WaterStateInstance, S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState) {
			this.WaterStateInstance = WaterStateInstance;
			this.S1getWaterState = S1getWaterState;
		}
	}

	public static class S1getWaterStateParameters<TestData> {
		public final String methodName = "S1getWaterState";
		public final Result<TestData> expectedResult;
		public S1getWaterStateParameters(Result<TestData> expectedResult) {
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<WaterStateInstance, java.lang.String> call() {
			return i ->
			i.getWaterState();
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
uy9Hp7//H6G2/G/gbwAA
END_CODEGEN_DATA
*/
