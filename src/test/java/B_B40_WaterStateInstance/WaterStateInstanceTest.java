/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 29aa54a1-0d61-4c48-b2ff-6b6e19183085
*/
package B_B40_WaterStateInstance;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import B_B40_WaterStateInstance.WaterStateInstance;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class WaterStateInstanceTest {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1getWaterState.methodName, data.WaterStateInstance, data.S1getWaterState.expectedResult, data.S1getWaterState.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(-20D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("solid")
						.build()
					)
				),
				/* testCaseName = */ "TestCase",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(20D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("liquid")
						.build()
					)
				),
				/* testCaseName = */ "TestCase1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* WaterStateInstance WaterStateInstance = */ new WaterStateInstance(-300D),
					/*  S1getWaterState = */ new S1getWaterStateParameters<>(
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.String>builder()
								.setExpectedReturnValue("invalid temperature")
						.build()
					)
				),
				/* testCaseName = */ "TestCase2",
				/* testCaseDescription = */ ""
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final WaterStateInstance WaterStateInstance;
		public final S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState;

		public DefaultScenarioTestData(WaterStateInstance WaterStateInstance, S1getWaterStateParameters<DefaultScenarioTestData> S1getWaterState) {
			this.WaterStateInstance = WaterStateInstance;
			this.S1getWaterState = S1getWaterState;
		}
	}

	public static class S1getWaterStateParameters<TestData> {
		public final String methodName = "S1getWaterState";
		public final Result<TestData> expectedResult;
		public S1getWaterStateParameters(Result<TestData> expectedResult) {
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<WaterStateInstance, java.lang.String> call() {
			return i ->
			i.getWaterState();
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
