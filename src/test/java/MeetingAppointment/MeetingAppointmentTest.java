/*
* DO NOT MODIFY THIS COMMENT
* Generated by vizitest
* Test model: 39ae69a0-15a3-4c2a-9109-3cee22f0f2cc
*/
package MeetingAppointment;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;
import java.util.stream.Stream;

import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.TestInstance;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.Arguments;
import org.junit.jupiter.params.provider.MethodSource;

import MeetingAppointment.AppointmentChecker;
import MeetingAppointment.MeetingAppointment;

@SuppressWarnings("unused")
@TestInstance(TestInstance.Lifecycle.PER_CLASS)
public class MeetingAppointmentTest {
	
//region Scenarios
	@ParameterizedTest(name = "{1} [{index}] {2}")
	@MethodSource({"DefaultScenarioSource"})
	public void DefaultScenarioTest(DefaultScenarioTestData data, String TestName, String TestDescription) {
		ActualResultStorage.setStorage(); //saves the results of the called Methods
		
		assertion(data, data.S1addMeeting.methodName, data.AppointmentChecker, data.S1addMeeting.expectedResult, data.S1addMeeting.call());
	}
//endregion

//region Data

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	private Stream<Arguments> DefaultScenarioSource() throws Exception {
		return Stream.of(
			Arguments.of(
				new DefaultScenarioTestData(
					/* AppointmentChecker AppointmentChecker = */ new AppointmentChecker(),
					/*  S1addMeeting = */ new S1addMeetingParameters<>(
						/* MeetingAppointment meeting = */ new MeetingAppointment(new Date(2023, 11, 12, 10, 0), new Date(2023, 11, 12, 10, 30), "Catch up"),
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.Boolean>builder()
								.setExpectedReturnValue(true)
						.build()
					)
				),
				/* testCaseName = */ "Positive1",
				/* testCaseDescription = */ ""
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* AppointmentChecker AppointmentChecker = */ new AppointmentChecker(),
					/*  S1addMeeting = */ new S1addMeetingParameters<>(
						/* MeetingAppointment meeting = */ new MeetingAppointment(new Date(2023, 11, 12, 10, 0), new Date(2023, 11, 12, 9, 0), "Catch up"),
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.Boolean>builder()
								.setExpectedReturnValue(false)
						.build()
					)
				),
				/* testCaseName = */ "Negative1",
				/* testCaseDescription = */ "addMeeting:meeting: Invalid Values"
			),
			Arguments.of(
				new DefaultScenarioTestData(
					/* AppointmentChecker AppointmentChecker = */ new AppointmentChecker(),
					/*  S1addMeeting = */ new S1addMeetingParameters<>(
						/* MeetingAppointment meeting = */ new MeetingAppointment(new Date(2023, 11, 20), new Date(2022, 11, 20), "Call"),
						/* referencingMethodName = */ "",
							ExpectedReturnValueResult.<DefaultScenarioTestData, java.lang.Boolean>builder()
								.setExpectedReturnValue(false)
						.build()
					)
				),
				/* testCaseName = */ "Negative2",
				/* testCaseDescription = */ "addMeeting:meeting: Invalid Values"
			)
		);
	}
//endregion

//region Types

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	public static class DefaultScenarioTestData {
		public final AppointmentChecker AppointmentChecker;
		public final S1addMeetingParameters<DefaultScenarioTestData> S1addMeeting;

		public DefaultScenarioTestData(AppointmentChecker AppointmentChecker, S1addMeetingParameters<DefaultScenarioTestData> S1addMeeting) {
			this.AppointmentChecker = AppointmentChecker;
			this.S1addMeeting = S1addMeeting;
		}
	}

	public static class S1addMeetingParameters<TestData> {
		public final String methodName = "S1addMeeting";
		public final ObjectWrapper<MeetingAppointment> meeting;
		public final Result<TestData> expectedResult;
		public S1addMeetingParameters(MeetingAppointment meeting, String referencingMethodName, Result<TestData> expectedResult) {
			this.meeting = new ObjectWrapper<>(meeting, referencingMethodName);
			this.expectedResult = expectedResult;
		}

		public ExceptionFunction<AppointmentChecker, java.lang.Boolean> call() {
			return i ->
			i.addMeeting(meeting.get());
		}
	}
//endregion

//region Vizitest Utils

//=========================================================================================================================
//Please modify this section only in the Modeleditor not here in the code, because otherwise it will cause merge conflicts!
//=========================================================================================================================
	static class ActualResultStorage {
		private static Map<String, Object> actualResultMap = new HashMap<>();
	
		public static void setStorage() {
			actualResultMap = new HashMap<>();
		}
	
		public static <T> void put(String key, T value) {
			actualResultMap.put(key, value);
		}
	
		@SuppressWarnings("unchecked")
		public static <T> T getOrDefault(String key, T defaultValue) {
			return (T) actualResultMap.getOrDefault(key, defaultValue);
		}
	}
	
	
	public static <I> ExceptionFunction<I, VoidR> asFunc(ExceptionConsumer<I> action) {
		return i -> {
			action.accept(i);
			return null;
		};
	}
	
	public static <TestData, Instance, ReturnType> void assertion(TestData data, String methodName, Instance instance, Result<TestData> expectedResult, ExceptionFunction<Instance, ReturnType> toApply) {
		if (expectedResult == null) {
			ActualResultStorage.put(methodName, Assertions.assertDoesNotThrow(() -> toApply.apply(instance)));
			return;
		}
		ReturnType actualResult = null;
		if (expectedResult instanceof ExpectedExceptionResult) {
			Assertions.assertThrows(((ExpectedExceptionResult<TestData>) expectedResult).getExpectedException(), () -> toApply.apply(instance));
		} else {
			actualResult = Assertions.assertDoesNotThrow(() -> toApply.apply(instance));
			if (expectedResult instanceof ExpectedReturnValueResult &&
					!(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue() instanceof VoidR)) {
				assertEqualsByType(((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getExpectedReturnValue(),
						actualResult, ((ExpectedReturnValueResult<TestData, ReturnType>) expectedResult).getDelta());
			} else if (expectedResult instanceof CustomAssertionResult) {
				((CustomAssertionResult<TestData, Instance, ReturnType>) expectedResult).getCustomAssertion().accept(instance, actualResult);
			}
			if (expectedResult.getSideEffects() != null) {
				for (SideEffect<TestData> sideEffect : expectedResult.getSideEffects()) {
					Object sideEffectResult = sideEffect.getActualValueAccessor().apply(data);
					assertEqualsByType(sideEffect.getExpectedValue(), sideEffectResult, sideEffect.getDelta());
				}
			}
		}
		ActualResultStorage.put(methodName, actualResult);
	}
	
	private static void assertEqualsByType(Object actualResult, Object expectedResult, double delta) {
		if (actualResult.getClass().isArray() && expectedResult.getClass().isArray()) {
			if (actualResult instanceof Object[] && expectedResult instanceof Object[]) {
				Assertions.assertArrayEquals((Object[]) actualResult, (Object[]) expectedResult);
			} else if (actualResult instanceof byte[] && expectedResult instanceof byte[]) {
				Assertions.assertArrayEquals((byte[]) actualResult, (byte[]) expectedResult);
			} else if (actualResult instanceof short[] && expectedResult instanceof short[]) {
				Assertions.assertArrayEquals((short[]) actualResult, (short[]) expectedResult);
			} else if (actualResult instanceof int[] && expectedResult instanceof int[]) {
				Assertions.assertArrayEquals((int[]) actualResult, (int[]) expectedResult);
			} else if (actualResult instanceof long[] && expectedResult instanceof long[]) {
				Assertions.assertArrayEquals((long[]) actualResult, (long[]) expectedResult);
			} else if (actualResult instanceof float[] && expectedResult instanceof float[]) {
				Assertions.assertArrayEquals((float[]) actualResult, (float[]) expectedResult, (float) delta);
			} else if (actualResult instanceof double[] && expectedResult instanceof double[]) {
				Assertions.assertArrayEquals((double[]) actualResult, (double[]) expectedResult, delta);
			} else if (actualResult instanceof char[] && expectedResult instanceof char[]) {
				Assertions.assertArrayEquals((char[]) actualResult, (char[]) expectedResult);
			} else if (actualResult instanceof boolean[] && expectedResult instanceof boolean[]) {
				Assertions.assertArrayEquals((boolean[]) actualResult, (boolean[]) expectedResult);
			} else {
				Assertions.fail("Unsupported array type");
			}
		} else if (actualResult instanceof Collection && expectedResult instanceof Collection) {
			Assertions.assertIterableEquals((Collection<?>) actualResult, (Collection<?>) expectedResult);
		} else if (Double.isNaN(delta)) {
			Assertions.assertEquals(actualResult, expectedResult);
		} else {
			assert actualResult instanceof Double;
			Assertions.assertEquals((Double) actualResult, (Double) expectedResult, delta);
		}
	}
	
	static class CustomAssertionResult<TestData, TInstance, TReturn> extends Result<TestData> {
		private final BiConsumer<TInstance, TReturn> customAssertion;
	
		protected CustomAssertionResult(CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> b) {
			super(b);
			this.customAssertion = b.customAssertion;
		}
	
		public static <TestData, TInstance, TReturn> CustomAssertionResultBuilder<TestData, TInstance, TReturn, ?, ?> builder() {
			return new CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>();
		}
	
		public BiConsumer<TInstance, TReturn> getCustomAssertion() {
			return this.customAssertion;
		}
	
		public String toString() {
			return "CustomAssertionResult(customAssertion=" + this.getCustomAssertion() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof CustomAssertionResult)) return false;
			final CustomAssertionResult<?, ?, ?> other = (CustomAssertionResult<?, ?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$customAssertion = this.getCustomAssertion();
			final Object other$customAssertion = other.getCustomAssertion();
			if (this$customAssertion == null ? other$customAssertion != null : !this$customAssertion.equals(other$customAssertion))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof CustomAssertionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $customAssertion = this.getCustomAssertion();
			result = result * PRIME + ($customAssertion == null ? 43 : $customAssertion.hashCode());
			return result;
		}
	
		public static abstract class CustomAssertionResultBuilder<TestData, TInstance, TReturn, C extends CustomAssertionResult<TestData, TInstance, TReturn>, B extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private BiConsumer<TInstance, TReturn> customAssertion;
	
			public B setCustomAssertion(BiConsumer<TInstance, TReturn> customAssertion) {
				this.customAssertion = customAssertion;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "CustomAssertionResult.CustomAssertionResultBuilder(super=" + super.toString() + ", customAssertion=" + this.customAssertion + ")";
			}
		}
	
		private static final class CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> extends CustomAssertionResultBuilder<TestData, TInstance, TReturn, CustomAssertionResult<TestData, TInstance, TReturn>, CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn>> {
			private CustomAssertionResultBuilderImpl() {
			}
	
			protected CustomAssertionResultBuilderImpl<TestData, TInstance, TReturn> self() {
				return this;
			}
	
			public CustomAssertionResult<TestData, TInstance, TReturn> build() {
				return new CustomAssertionResult<TestData, TInstance, TReturn>(this);
			}
		}
	}
	
	@FunctionalInterface
	interface ExceptionConsumer<I> {
		void accept(I i) throws Exception;
	}
	
	@FunctionalInterface
	interface ExceptionFunction<I, R> {
		R apply(I i) throws Exception;
	}
	
	static class ExpectedExceptionResult<TestData> extends Result<TestData> {
		private final Class<? extends Throwable> expectedException;
	
		protected ExpectedExceptionResult(ExpectedExceptionResultBuilder<TestData, ?, ?> b) {
			super(b);
			this.expectedException = b.expectedException;
		}
	
		public static <TestData> ExpectedExceptionResultBuilder<TestData, ?, ?> builder() {
			return new ExpectedExceptionResultBuilderImpl<TestData>();
		}
	
		public Class<? extends Throwable> getExpectedException() {
			return this.expectedException;
		}
	
		public String toString() {
			return "ExpectedExceptionResult(expectedException=" + this.getExpectedException() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedExceptionResult)) return false;
			final ExpectedExceptionResult<?> other = (ExpectedExceptionResult<?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedException = this.getExpectedException();
			final Object other$expectedException = other.getExpectedException();
			if (this$expectedException == null ? other$expectedException != null : !this$expectedException.equals(other$expectedException))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedExceptionResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedException = this.getExpectedException();
			result = result * PRIME + ($expectedException == null ? 43 : $expectedException.hashCode());
			return result;
		}
	
		public static abstract class ExpectedExceptionResultBuilder<TestData, C extends ExpectedExceptionResult<TestData>, B extends ExpectedExceptionResultBuilder<TestData, C, B>> extends ResultBuilder<TestData, C, B> {
			private Class<? extends Throwable> expectedException;
	
			public B setExpectedException(Class<? extends Throwable> expectedException) {
				this.expectedException = expectedException;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedExceptionResult.ExpectedExceptionResultBuilder(super=" + super.toString() + ", expectedException=" + this.expectedException + ")";
			}
		}
	
		private static final class ExpectedExceptionResultBuilderImpl<TestData> extends ExpectedExceptionResultBuilder<TestData, ExpectedExceptionResult<TestData>, ExpectedExceptionResultBuilderImpl<TestData>> {
			private ExpectedExceptionResultBuilderImpl() {
			}
	
			protected ExpectedExceptionResultBuilderImpl<TestData> self() {
				return this;
			}
	
			public ExpectedExceptionResult<TestData> build() {
				return new ExpectedExceptionResult<TestData>(this);
			}
		}
	}
	
	static class ExpectedReturnValueResult<TestData, TReturn> extends Result<TestData> {
		private final TReturn expectedReturnValue;
		private double delta = Double.NaN;
	
		protected ExpectedReturnValueResult(ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> b) {
			super(b);
			this.expectedReturnValue = b.expectedReturnValue;
			if (b.delta$set) {
			    this.delta = b.delta$value;
			}
		}
	
		public static <TestData, TReturn> ExpectedReturnValueResultBuilder<TestData, TReturn, ?, ?> builder() {
			return new ExpectedReturnValueResultBuilderImpl<TestData, TReturn>();
		}
	
		public TReturn getExpectedReturnValue() {
			return this.expectedReturnValue;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public String toString() {
			return "ExpectedReturnValueResult(expectedReturnValue=" + this.getExpectedReturnValue() + ", delta=" + this.getDelta() + ")";
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ExpectedReturnValueResult)) return false;
			final ExpectedReturnValueResult<?, ?> other = (ExpectedReturnValueResult<?, ?>) o;
			if (!other.canEqual((Object) this)) return false;
			if (!super.equals(o)) return false;
			final Object this$expectedReturnValue = this.getExpectedReturnValue();
			final Object other$expectedReturnValue = other.getExpectedReturnValue();
			if (this$expectedReturnValue == null ? other$expectedReturnValue != null : !this$expectedReturnValue.equals(other$expectedReturnValue))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ExpectedReturnValueResult;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = super.hashCode();
			final Object $expectedReturnValue = this.getExpectedReturnValue();
			result = result * PRIME + ($expectedReturnValue == null ? 43 : $expectedReturnValue.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public static abstract class ExpectedReturnValueResultBuilder<TestData, TReturn, C extends ExpectedReturnValueResult<TestData, TReturn>, B extends ExpectedReturnValueResultBuilder<TestData, TReturn, C, B>> extends ResultBuilder<TestData, C, B> {
			private TReturn expectedReturnValue;
			private double delta$value;
			private boolean delta$set;
	
			public B setExpectedReturnValue(TReturn expectedReturnValue) {
				this.expectedReturnValue = expectedReturnValue;
				return self();
			}
	
			public B setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "ExpectedReturnValueResult.ExpectedReturnValueResultBuilder(super=" + super.toString() + ", expectedReturnValue=" + this.expectedReturnValue + ", delta$value=" + this.delta$value + ")";
			}
		}
	
		private static final class ExpectedReturnValueResultBuilderImpl<TestData, TReturn> extends ExpectedReturnValueResultBuilder<TestData, TReturn, ExpectedReturnValueResult<TestData, TReturn>, ExpectedReturnValueResultBuilderImpl<TestData, TReturn>> {
			private ExpectedReturnValueResultBuilderImpl() {
			}
	
			protected ExpectedReturnValueResultBuilderImpl<TestData, TReturn> self() {
				return this;
			}
	
			public ExpectedReturnValueResult<TestData, TReturn> build() {
				return new ExpectedReturnValueResult<TestData, TReturn>(this);
			}
		}
	}
	
	static class ObjectWrapper<T> {
		private final T object;
		private final String referencingMethodName;
	
		public ObjectWrapper(T object, String referencingMethodName) {
			this.object = object;
			this.referencingMethodName = referencingMethodName;
		}
	
		public T get() {
			return ActualResultStorage.getOrDefault(referencingMethodName, object);
		}
	
		public T getObject() {
			return this.object;
		}
	
		public String getReferencingMethodName() {
			return this.referencingMethodName;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof ObjectWrapper)) return false;
			final ObjectWrapper<?> other = (ObjectWrapper<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$object = this.getObject();
			final Object other$object = other.getObject();
			if (this$object == null ? other$object != null : !this$object.equals(other$object)) return false;
			final Object this$referencingMethodName = this.getReferencingMethodName();
			final Object other$referencingMethodName = other.getReferencingMethodName();
			if (this$referencingMethodName == null ? other$referencingMethodName != null : !this$referencingMethodName.equals(other$referencingMethodName))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof ObjectWrapper;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $object = this.getObject();
			result = result * PRIME + ($object == null ? 43 : $object.hashCode());
			final Object $referencingMethodName = this.getReferencingMethodName();
			result = result * PRIME + ($referencingMethodName == null ? 43 : $referencingMethodName.hashCode());
			return result;
		}
	
		public String toString() {
			return "ObjectWrapper(object=" + this.getObject() + ", referencingMethodName=" + this.getReferencingMethodName() + ")";
		}
	}
	
	static abstract class Result<TestData> {
		protected final List<SideEffect<TestData>> sideEffects;
	
		protected Result(ResultBuilder<TestData, ?, ?> b) {
			this.sideEffects = b.sideEffects;
		}
	
		public List<SideEffect<TestData>> getSideEffects() {
			return this.sideEffects;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof Result)) return false;
			final Result<?> other = (Result<?>) o;
			if (!other.canEqual((Object) this)) return false;
			final Object this$sideEffects = this.getSideEffects();
			final Object other$sideEffects = other.getSideEffects();
			if (this$sideEffects == null ? other$sideEffects != null : !this$sideEffects.equals(other$sideEffects))
				return false;
			return true;
		}
	
		protected boolean canEqual(final Object other) {
			return other instanceof Result;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $sideEffects = this.getSideEffects();
			result = result * PRIME + ($sideEffects == null ? 43 : $sideEffects.hashCode());
			return result;
		}
	
		public String toString() {
			return "Result(sideEffects=" + this.getSideEffects() + ")";
		}
	
		public static abstract class ResultBuilder<TestData, C extends Result<TestData>, B extends ResultBuilder<TestData, C, B>> {
			private List<SideEffect<TestData>> sideEffects;
	
			public B setSideEffects(List<SideEffect<TestData>> sideEffects) {
				this.sideEffects = sideEffects;
				return self();
			}
	
			protected abstract B self();
	
			public abstract C build();
	
			public String toString() {
				return "Result.ResultBuilder(sideEffects=" + this.sideEffects + ")";
			}
		}
	}
	
	static final class SideEffect<TestData> {
	
		private final Object expectedValue;
		private final Function<TestData, Object> actualValueAccessor;
		private double delta = Double.NaN;
	
		SideEffect(Object expectedValue, Function<TestData, Object> actualValueAccessor, double delta) {
			this.expectedValue = expectedValue;
			this.actualValueAccessor = actualValueAccessor;
			this.delta = delta;
		}
	
		private static double $default$delta() {
			return Double.NaN;
		}
	
		public static <TestData> SideEffectBuilder<TestData> builder() {
			return new SideEffectBuilder<TestData>();
		}
	
		public Object getExpectedValue() {
			return this.expectedValue;
		}
	
		public Function<TestData, Object> getActualValueAccessor() {
			return this.actualValueAccessor;
		}
	
		public double getDelta() {
			return this.delta;
		}
	
		public void setDelta(double delta) {
			this.delta = delta;
		}
	
		public boolean equals(final Object o) {
			if (o == this) return true;
			if (!(o instanceof SideEffect)) return false;
			final SideEffect<?> other = (SideEffect<?>) o;
			final Object this$expectedValue = this.getExpectedValue();
			final Object other$expectedValue = other.getExpectedValue();
			if (this$expectedValue == null ? other$expectedValue != null : !this$expectedValue.equals(other$expectedValue))
				return false;
			final Object this$actualValueAccessor = this.getActualValueAccessor();
			final Object other$actualValueAccessor = other.getActualValueAccessor();
			if (this$actualValueAccessor == null ? other$actualValueAccessor != null : !this$actualValueAccessor.equals(other$actualValueAccessor))
				return false;
			if (Double.compare(this.getDelta(), other.getDelta()) != 0) return false;
			return true;
		}
	
		public int hashCode() {
			final int PRIME = 59;
			int result = 1;
			final Object $expectedValue = this.getExpectedValue();
			result = result * PRIME + ($expectedValue == null ? 43 : $expectedValue.hashCode());
			final Object $actualValueAccessor = this.getActualValueAccessor();
			result = result * PRIME + ($actualValueAccessor == null ? 43 : $actualValueAccessor.hashCode());
			final long $delta = Double.doubleToLongBits(this.getDelta());
			result = result * PRIME + (int) ($delta >>> 32 ^ $delta);
			return result;
		}
	
		public String toString() {
			return "SideEffect(expectedValue=" + this.getExpectedValue() + ", actualValueAccessor=" + this.getActualValueAccessor() + ", delta=" + this.getDelta() + ")";
		}
	
		public static class SideEffectBuilder<TestData> {
			private Object expectedValue;
			private Function<TestData, Object> actualValueAccessor;
			private double delta$value;
			private boolean delta$set;
	
			SideEffectBuilder() {
			}
	
			public SideEffectBuilder<TestData> setExpectedValue(Object expectedValue) {
				this.expectedValue = expectedValue;
				return this;
			}
	
			public SideEffectBuilder<TestData> setActualValueAccessor(Function<TestData, Object> actualValueAccessor) {
				this.actualValueAccessor = actualValueAccessor;
				return this;
			}
	
			public SideEffectBuilder<TestData> setDelta(double delta) {
				this.delta$value = delta;
				this.delta$set = true;
				return this;
			}
	
			public SideEffect<TestData> build() {
				double delta$value = this.delta$value;
				if (!this.delta$set) {
					delta$value = SideEffect.$default$delta();
				}
				return new SideEffect<TestData>(this.expectedValue, this.actualValueAccessor, delta$value);
			}
	
			public String toString() {
				return "SideEffect.SideEffectBuilder(expectedValue=" + this.expectedValue + ", actualValueAccessor=" + this.actualValueAccessor + ", delta$value=" + this.delta$value + ")";
			}
		}
	}
	
	static class VoidR {
	
	}
	
	  @SafeVarargs
	static <T> List<T> listOf(final T... args) {
		if (args.length == 0) return Collections.emptyList();
		if (args.length == 1) return Collections.singletonList(args[0]);
		return Arrays.asList(args);
	}
	
	@SafeVarargs
	static <K, V> Map<K, V> mapOfEntries(final Map.Entry<K, V>... entries) {
		final Map<K,V> result;
	
		if (entries.length == 0) {
			result = Collections.emptyMap();
		} else if (entries.length == 1) {
			result = Collections.singletonMap(entries[0].getKey(), entries[0].getValue());
		} else {
			result = new LinkedHashMap<>(entries.length);
			for (Map.Entry<K,V> entry : entries) {
				result.put(entry.getKey(), entry.getValue());
			}
		}
	
		return new HashMap<>(result);
	}
	
	static class VizitestMapEntry<K,V> implements Map.Entry<K,V> {
		private final K key;
		private final V value;
	
		public VizitestMapEntry(K key, V value) {
			this.key = key;
			this.value = value;
		}
	
		@Override
		public K getKey() {
			return this.key;
		}
	
		@Override
		public V getValue() {
			return this.value;
		}
	
		@Override
		public V setValue(V value) {
			throw new UnsupportedOperationException();
		}
	}
	
	static <K, V> Map.Entry<K, V> entry(K key, V value) {
		return new VizitestMapEntry<>(key, value);
	}
//endregion
}

/*
WARNING: Modification of this comment will make it impossible to merge user-defined changes

BEGIN_CODEGEN_DATA
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
END_CODEGEN_DATA
*/
